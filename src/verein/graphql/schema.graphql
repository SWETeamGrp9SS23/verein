schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Vereinsdaten zu lesen"
type Query {
  # hier wird der verein nach den namen gefiltert es wird die liste verein gefiltert
  vereine(name: String): [Verein!]

  verein(id: ID!): Verein
}

"Funktionen, um Vereine neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: VereinInput!): String

  update(input: VereinUpdateInput!): Int

  delete(id: ID!): Boolean
}

"Daten zu Adresse eines Vereins" # nochmal checken wann muss es einzeln da steheen und wann nicht
type Adresse {
  plz: String!
  ort: String!
}

"Datenschema zu einem Verein, das gelesen wird"
type Verein {
  id: ID!
  version: Int!
  name: String!
  mitgliedsbeitrag: Float!
  entstehungsdatum: String
  homepage: String
}

"Daten zu Adresse eines neuen Vereins" # nochmal checken wann muss es einzeln da steheen und wann nicht
type Adresse {
  plz: String!
  ort: String!
}

"Daten für ein neuen Verein"
input VereinInput {
  mitgliedsbeitrag: Float
  entstehungsdatum: String
  homepage: String
  name: String!
}

"Daten für ein zu ändernden Verein"
input VereinUpdateInput {
  id: ID
  version: Int
  mitgliedsbeitrag: Float
  entstehungsdatum: String
  homepage: String
  name: String
}
